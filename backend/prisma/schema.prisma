// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum pollPhase {
  COLLECTING
  VOTING
  CLOSED
}

model Poll {
  id          Int       @id @default(autoincrement())
  title       String
  phase       pollPhase @default(COLLECTING)
  manageToken String    @unique
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  ideas       Idea[]
  votes       Vote[]
  Participant Participant[]
}

model Idea {
  id         Int      @id @default(autoincrement())
  pollId     Int
  pollf      Poll     @relation(fields: [pollId], references: [id]) //pollId in Idea corresponds to id in Poll
  authorName String?
  text       String
  createdAt  DateTime @default(now())
  Vote       Vote[]
}

model Participant {
  id     Int     @id @default(autoincrement())
  pollId Int
  pollf  Poll    @relation(fields: [pollId], references: [id]) //pollId in Idea corresponds to id in Poll
  name   String?
  email  String?
  Vote   Vote[]
}

model Vote {
  id            Int         @id @default(autoincrement())
  pollId        Int
  pollf         Poll        @relation(fields: [pollId], references: [id])
  participantId Int
  participantf  Participant @relation(fields: [participantId], references: [id])
  ideaId        Int
  ideaf         Idea        @relation(fields: [ideaId], references: [id])
  createdAt     DateTime    @default(now())
}
